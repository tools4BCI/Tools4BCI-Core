%   Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
%   Michele Tavella <michele.tavella@epfl.ch>
%
%   This program is free software: you can redistribute it and/or modify
%   it under the terms of the GNU General Public License as published by
%   the Free Software Foundation, either version 3 of the License, or
%   (at your option) any later version.
%
%   This program is distributed in the hope that it will be useful,
%   but WITHOUT ANY WARRANTY; without even the implied warranty of
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%   GNU General Public License for more details.
%
%   You should have received a copy of the GNU General Public License
%   along with this program.  If not, see <http://www.gnu.org/licenses/>.


$ #include <tobicore/TCException.hpp>
$ #include <tobiic/ICMessage.hpp>
$ #include <tobiic/ICSerializerRapid.hpp>
$ #include <cstring>

@function [q] = icserializerrapid_new(m);
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% ICSERIALIZERRAPID_NEW Allocates an ICSerializerRapid object
%
% M = ICSERIALIZERRAPID_NEW(Q) return the handle M to a new ICSerializerRapid
% object. Q is the handle to an instance of ICMessage.
%
% See also ICSERIALIZERRAPID_DELETE, ICMESSAGE_NEW, ICMESSAGE_DELETE
	# ICSerializerRapid* q = new ICSerializerRapid(ICMessage* m);

@function [m] = icserializerrapid_delete(m)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% ICSERIALIZERRAPID_DELETE Deletes an ICSerializerRapid object
%
% M = ICSERIALIZERRAPID_DELETE(M) frees the instance of an ICSerializerRapid object 
% pointed by the handle M. 
%
% Returns 0 upon success, >0 otherwise.
%
% See also ICSERIALIZERRAPID_NEW
	# delete(ICSerializerRapid* m);
	m = 0;

@function [q] = icmessage_new();
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% ICMESSAGE_NEW Allocates an ICMessage object
%
% Q = ICMESSAGE_NEW() returns the handle Q to a new ICMessage object.
%
% See also ICMESSAGE_DELETE
	# ICMessage* q = new ICMessage();

@function [q] = icmessage_delete(q)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% ICMESSAGE_DELETE Deletes an ICMessage object
%
% Q = ICMESSAGE_DELETE(Q) frees the instance of an ICMessage object 
% pointed by the handle Q 
%
% Returns 0 upon success, >0 otherwise.
%
% See also ICMESSAGE_NEW
	# delete(ICMessage* q);
	q = 0;

@function [status] = icmessage_addclassifier(q, name, desc, vtype, ltype)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% ICMESSAGE_ADDCLASSIFIER Adds an ICClassifier to an ICMessage
%
% STATUS = ICMESSAGE_ADDCLASSIFIER(Q, NAME, DESC, VTYPE, LTYPE) Adds a new
% ICClassifier to the ICMessage Q. 
% NAME is the name of the classifier (i.e. "cnbi_mi"), DESC the description
% field (i.e. "CNBI MI Classifier").
% VTYPE is the numerical id of the value type (i.e. 0 for probabilities).
% LTYPE is the numerical id of the label type (i.e. 0 for Biosig labels).
% Returns 1 on success, 0 and prints a message on error otherwise.
%
% See also ICMESSAGE_GETVALUES, ICMESSAGE_GETLABELS
	$ bool addc(ICMessage* q, std::string* name, std::string* desc, int* vtype, int* ltype) {
	$	try {
	$ 		ICClassifier* c = new ICClassifier(*name, *desc, *vtype, *ltype);
	$ 		q->classifiers.Add(c);
	$	} catch(TCException e) {
	$		printf("[icmessage_addclassifier] Exception in libtobiic: %s, %s\n",
	$			e.GetCaller().c_str(), e.GetInfo().c_str());
	$		return false;
	$	}
	$	return true;
	$ }
	# std::string* sname = new std::string(cstring name);
	# std::string* sdesc = new std::string(cstring desc);
	# bool status = addc(ICMessage* q, std::string* sname, std::string* sdesc, int* vtype, int* ltype);

@function [isempty] = icmessage_dumpmessage(q)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% ICMESSAGE_DUMPMESSAGE Prints an ICMessage
%
% [ISEMPTY] = ICMESSAGE_DUMPMESSAGE(Q) Returns 1 if the ICMessage Q has at least
% one ICClassifier and prints on the standard output the internal structure.
% Returns 0 without any output otherwise.
	$ bool dumpc(ICMessage* q) {
	$	try {
	$ 	  q->Dump();
	$	} catch(TCException e) {
	$		printf("[icmessage_dumpmessage] Exception in libtobiic: %s, %s\n",
	$			e.GetCaller().c_str(), e.GetInfo().c_str());
	$		return false;
	$	}
	$	return true;
	$ }
	# bool isempty = dumpc(ICMessage* q);

@function [status] = icmessage_addclass(q, name, label, value)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% ICMESSAGE_ADDCLASS Adds an ICClass to an ICClassifier
%
% STATUS = ICMESSAGE_ADDCLASS(Q, NAME, LABEL, VALUE) Adds a new
% ICClass to the ICClassifier called NAME in the ICMessage Q.
% NAME is the classifier name (i.e. "cnbi_mi").
% VALUE is the value (i.e. 0.75 for 'prob')
% LTYPE is the label (i.e. '0x781' for 'biosig')
% Returns 1 on success, 0 and prints an error otherwise.
%
% See also ICMESSAGE_GETVALUES, ICMESSAGE_GETLABELS, ICMESSAGE_ADDCLASSIFIER
	$ bool addk(ICMessage* q, std::string* name, std::string* label, float* value) {
	$	try {
	$		ICClassifier* c = q->classifiers.Get(*name);
	$		ICClass* k = new ICClass(*label, *value);
	$		c->classes.Add(k);
	$	} catch(TCException e) {
	$		printf("[icmessage_addclass] Exception in libtobiic: %s, %s\n",
	$			e.GetCaller().c_str(), e.GetInfo().c_str());
	$		return false;
	$	}
	$	return true;
	$ }
	# std::string* sname = new std::string(cstring name);
	# std::string* slabel = new std::string(cstring label);
	# bool status = addk(ICMessage* q, std::string* sname, std::string* slabel, float* value);

@function [retval] = icmessage_getvalue(q, name, label)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% ICMESSAGE_GETVALUE Returns the value of a specific ICClass
%
% [RETVAL, STATUS] = ICMESSAGE_GETVALUE(Q, NAME, LABEL) where Q is an ICMessage. 
% Returns the value RETVAL of ICClass with LABEL (i.e. '0x781' for 'biosig')
% belonging to ICClassifier NAME (i.e. 'cnbi_mi').
% STATUS is set to NaN if an error occurs.
%
% See also ICMESSAGE_SETVALUE, ICMESSAGE_ADDCLASS, ICMESSAGE_ADDCLASSIFIER,
% ICMESSAGE_NEW
	$ void getv(ICMessage* q, std::string* name, std::string* label, float* value) {
	$	try {
	$ 		(*value) = q->classifiers.Get(*name)->classes.Get(*label)->GetValue();
	$	} catch(TCException e) {
	$		printf("[icmessage_getvalue] Exception in libtobiic: %s, %s\n",
	$			e.GetCaller().c_str(), e.GetInfo().c_str());
	$	}
	$ }
	retval = NaN;
	# std::string* sname = new std::string(cstring name);
	# std::string* slabel = new std::string(cstring label);
	# getv(ICMessage* q, std::string* sname, std::string* slabel, inout float* retval);

@function [status] = icmessage_setvalue(q, name, label, value)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% ICMESSAGE_SETVALUE Sets the value of a specific ICClass
%
% STATUS = ICMESSAGE_SETVALUE(Q, NAME, LABEL, VALUE) where Q is an ICMessage. 
% Sets the value of ICClass with LABEL (i.e. '0x781' for 'biosig') belonging to 
% ICClassifier NAME (i.e. 'cnbi_mi') to VALUE (i.e. '0.75' for 'prob').
% Returns 0 on error, 1 upon success.
% 
% See also ICMESSAGE_GETVALUE, ICMESSAGE_ADDCLASS, ICMESSAGE_ADDCLASSIFIER,
% ICMESSAGE_NEW
	$ bool setv(ICMessage* q, std::string* name, std::string* label, float* value) {
	$ 	try {
	$ 		q->classifiers.Get(*name)->classes.Get(*label)->SetValue(*value);
	$	} catch(TCException e) {
	$		printf("[icmessage_setvalue] Exception in libtobiic: %s, %s\n",
	$			e.GetCaller().c_str(), e.GetInfo().c_str());
	$		return false;
	$	}
	$	return true;
	$ }
	# std::string* sname = new std::string(cstring name);
	# std::string* slabel = new std::string(cstring label);
	# bool status = setv(ICMessage* q, std::string* sname, std::string* slabel, float* value);

@function [smessage] = icmessage_serialize(s)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% ICMESSAGE_SERIALIZE Serializes an ICMessage using an ICSerializer
%
% SMESSAGE = ICMESSAGE_SERIALIZE(S) Serializes the ICMessage Q (set at 
% creation time) using the ICSerializer S.
% Returns an empty string on error.
%
% See also ICMESSAGE_NEW, ICSERIALIZERRAPID_NEW, ICMESSAGE_DESERIALIZE
	$ void serialize(ICSerializerRapid* s, char* buffer) {
	$ 	try {
	$ 		s->SerializeCh(buffer, 4096);
	$	} catch(TCException e) {
	$		printf("[icmessage_serialize] Exception in libtobiic: %s, %s\n",
	$			e.GetCaller().c_str(), e.GetInfo().c_str());
	$	}
	$ } 
	$
	smessage = '';
	# serialize(ICSerializerRapid* s, inout cstring smessage[4096]);

@function [status] = icmessage_deserialize(s, smessage)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% ICMESSAGE_DESERIALIZE Deerializes an ICMessage using an ICSerializer
%
% STATUS = ICMESSAGE_DESERIALIZE(S, SMESSAGE) Deserializes SMESSAGE filling up
% ICMessage Q (set at creation time). S is an  ICSerializer.
% Returns 0 on error, 1 upon success.
%
% See also ICMESSAGE_NEW, ICSERIALIZERRAPID_NEW, ICMESSAGE_SERIALIZE
	$ bool deserialize(ICSerializerRapid* s, char* buffer) {
	$ 	try {
	$ 		s->DeserializeCh(buffer, 4096);
	$	} catch(TCException e) {
	$		printf("[icmessage_deserialize] Exception in libtobiic: %s, %s\n",
	$			e.GetCaller().c_str(), e.GetInfo().c_str());
	$		return false;
	$	}
	$ } 
	$
	# bool status = deserialize(ICSerializerRapid* s, cstring smessage[4096]);

@function [vtype] = icmessage_getvaluetype(name)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% ICMESSAGE_GETVALUETYPE Returns the numerical id of a value type
%
% VTYPE = ICMESSAGE_GETVALUETYPE(NAME) Returns the numerical id (i.e.
% 0) for the value type in NAME (i.e. 'prob').
%
% See also ICMESSAGE_GETVALUES
	$ int getvtype(char* buffer, int* vtype) {
	$	(*vtype) = ICClassifier::ValueType(buffer);
	$ } 
	$
	vtype = -1;
	# getvtype(cstring name, inout int* vtype);

@function [ltype] = icmessage_getlabeltype(name)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% ICMESSAGE_GETLABELTYPE Returns the numerical id of a label type
%
% LTYPE = ICMESSAGE_GETLABELTYPE(NAME) Returns the numerical id (i.e.
% 0) for the label type in NAME (i.e. 'biosig').
%
% See also ICMESSAGE_GETLABELS
	$ int getltype(char* buffer, int* ltype) {
	$	(*ltype) = ICClassifier::LabelType(buffer);
	$ } 
	$
	ltype = -1;
	# getltype(cstring name, inout int* ltype);

@function [id, key] = icmessage_getvalues()
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% ICMESSAGE_GETVALUES Returns the supported value types
%
% [ID, KEY] = ICMESSAGE_GETVALUES() returns the numerical ids (ID) and the
% associated keys (KEY) for all the supported IC values.
%
% See also ICMESSAGE_GETVALUES
	id  = [-1 0 1 2 3];
	key = {'undef' 'prob' 'dist' 'clbl' 'rcoe'};

@function [id, key] = icmessage_getlabels()
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% ICMESSAGE_GETLABELS Returns the supported label types
%
% [ID, KEY] = ICMESSAGE_GETLABELS() returns the numerical ids (ID) and the
% associated keys (KEY) for all the supported IC labels.
%
% See also ICMESSAGE_GETLABELS
	id  = [-1 0 1 2];
	key = {'undef' 'biosig' 'class' 'custom'};

@function [bidx] = icmessage_getbidx(q)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% ICMESSAGE_GETBIDX Gets the block number
%
% [BIDX] = ICMESSAGE_GETBIDX(Q) returns the block number
%
% See also ICMESSAGE_SETBIDX, ICMESSAGE_INCBIDX
	$ int getbidx(ICMessage* q) {
	$ 	return q->GetBlockIdx();
	$ } 
	# int bidx = getbidx(ICMessage* q);

@function [bidx] = icmessage_setbidx(q, value)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% ICMESSAGE_SETBIDX Sets the block number
%
% [BIDX] = ICMESSAGE_SETBIDX(Q, VALUE) sets the block number according to VALUE
% and returns the block number value just because it's cool.
%
% See also ICMESSAGE_GETBIDX, ICMESSAGE_INCBIDX
	$ int setbidx(ICMessage* q, int value) {
	$ 	return q->SetBlockIdx(value);
	$ } 
	# int bidx = setbidx(ICMessage* q, int value);

@function [bidx] = icmessage_incbidx(q)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% ICMESSAGE_INCBIDX Increments the block number
%
% [BIDX] = ICMESSAGE_INCBIDX(Q) increments the block number and returns its
% value
%
% See also ICMESSAGE_GETBIDX, ICMESSAGE_SETBIDX
	$ int incbidx(ICMessage* q) {
	$ 	return q->IncBlockIdx();
	$ } 
	# int bidx = incbidx(ICMessage* q);

@function icmessage_absolutetic(q)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% ICMESSAGE_ABSOLUTETIC Tics the absolute
%
% ICMESSAGE_ABSOLUTETIC(Q) tics the internal absolute absolute
%
% See also ICMESSAGE_ABSOLUTETOC, ICMESSAGE_ABSOLUTEGET
	$ void absolutetic(ICMessage* q) {
	$ 	q->absolute.Tic();
	$ } 
	# absolutetic(ICMessage* q);

@function [toc] = icmessage_absolutetoc(q)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>%
%
% ICMESSAGE_ABSOLUTETOC Tocs the absolute
%
% [TOC] = ICMESSAGE_ABSOLUTETOC(Q) tocs the internal absolute absolute,
% returning the time difference in milliseconds.
%
% See also ICMESSAGE_ABSOLUTETIC, ICMESSAGE_ABSOLUTEGET
	$ double absolutetoc(ICMessage* q) {
	$ 	return q->absolute.Toc();
	$ } 
	# double toc = absolutetoc(ICMessage* q);

@function [stoc] = icmessage_absoluteget(q)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% ICMESSAGE_ABSOLUTEGET Returns the absolute as string
%
% [TOC] = ICMESSAGE_ABSOLUTEGET(Q) returns the internal absolute absolute as a
% string.
%
% See also ICMESSAGE_ABSOLUTETIC, ICMESSAGE_ABSOLUTETOC
	$ void absoluteget(ICMessage* q, char* stoc) {
	$	std::string cache;
	$ 	q->absolute.Get(&cache);
	$	strcpy(stoc, cache.c_str());
	$ } 
	stoc = '';
	# absoluteget(ICMessage* q, inout cstring stoc[4096]);

@function icmessage_relativetic(q)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% ICMESSAGE_RELATIVETIC Tics the relative
%
% ICMESSAGE_RELATIVETIC(Q) tics the internal relative relative absolute
%
% See also ICMESSAGE_RELATIVETOC, ICMESSAGE_RELATIVEGET
	$ void relativetic(ICMessage* q) {
	$ 	q->relative.Tic();
	$ } 
	# relativetic(ICMessage* q);

@function [toc] = icmessage_relativetoc(q)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% ICMESSAGE_RELATIVETOC Tocs the relative
%
% [TOC] = ICMESSAGE_RELATIVETOC(Q) tocs the internal relative relative
% absolute, returning the time difference in milliseconds.
%
% See also ICMESSAGE_RELATIVETIC, ICMESSAGE_RELATIVEGET
	$ double relativetoc(ICMessage* q) {
	$ 	return q->relative.Toc();
	$ } 
	# double toc = relativetoc(ICMessage* q);

@function [stoc] = icmessage_relativeget(q)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% ICMESSAGE_RELATIVEGET Returns the relative as string
%
% [TOC] = ICMESSAGE_RELATIVEGET(Q) returns the internal relative relative as a
% string.
%
% See also ICMESSAGE_RELATIVETIC, ICMESSAGE_RELATIVETOC
	$ void relativeget(ICMessage* q, char* stoc) {
	$	std::string cache;
	$ 	q->relative.Get(&cache);
	$	strcpy(stoc, cache.c_str());
	$ } 
	stoc = '';
	# relativeget(ICMessage* q, inout cstring stoc[4096]);
